#!/bin/bash

# Dynamically generated by Chef on <%= node['fqdn'] %>
# Local modifications will be overwritten by Chef.
#
# This is a modified version of https://github.com/bflad/chef-auto-patch/blob/master/templates/default/auto-patch.sh.erb
# This cookbook overrides the one in the autopatch_ii cookbook.

# Fix ENV PATH for running as cron job
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Write a message to a log file and echo it to the console.
# Param 1: [string] The message to be logged.
function writeHostAndLogFile {
  echo $1
  echo "`date -Is` (<%= node['hostname'] %>): $1" >> <%= node['autopatch_ii']['working_dir'] %>/autopatch.log
}

# Send an email
#  Param 1: [string] The subject of the message to send
#  Param 2: [string] The plain-text body of the message to send
function sendEmail {
  to=<%= node['autopatch_ii']['email_to_addresses'].split(',').map {|x| x.gsub(/"/, "").strip}.join(',') %>
  from=<%= node['autopatch_ii']['email_from_address'] %>
  subject=$1
  body="$2"

  echo "$body" | s-nail -s "$subject" -r "$from" -a "<%= node['autopatch_ii']['working_dir'] %>/autopatch.log" -S smtp="<%= node['autopatch_ii']['email_smtp_server'] %>" "$to"
}

# Based on configuration and the status of the process, conditionally sends an email
#  Param 1: [string] true or false, indicating whether yum upgrade was attempted
#  Param 2: [string] true or false, indicating whether manual reboot is required
#  Param 3: [integer], return code of previous process
function sendMailIfNecessary {
  updateAttempted=$1
  manualReboot=$2
  exitCode=$3
  mailNotificationMode=<%= node['autopatch_ii']['email_notification_mode'] %>
  subject="AutoPatch ran."
  body=""

  #check for non-zero exit code
  if [ $exitCode -gt 0 ]
  then
    someErrorOccurred=true
    subject="$subject Errors: Yes"
    body=$'AN ERROR OCCURRED. See full attached log for details.\n'
  else
    someErrorOccurred=false
    subject="$subject Errors: No"
    body=$'Update process was successful.\n'
  fi

  if [[ "$manualReboot" == "true" && "$updateAttempted" == "true" ]]
  then
    subject="$subject Reboot: Yes"
    body=$body$'Manual reboot may be required.\n'
  else
    subject="$subject Reboot: No"
    if [ "$updateAttempted" == "true" ]
    then
      body=$body$'Machine will automatically reboot.\n'
    else
      body=$body$'No new updates.\n'
    fi
  fi

  if [[ "$mailNotificationMode" == "Always" || ( "$mailNotificationMode" == "OnlyOnErrorOrManualReboot" && ( "$someErrorOccurred" == "true" || "$manualReboot" == "true" ) ) ]]
  then
    writeHostAndLogFile "Sending email notification"
    sendEmail "$subject" "$body"
  fi
}

# Real work starts here
<% if node['autopatch_ii']['download_install_splay_max_seconds'] > 0 -%>
theSleepSeconds=$[( ( $RANDOM % <%= node['autopatch_ii']['download_install_splay_max_seconds'] %> ) + 1 )]
writeHostAndLogFile "Download and Install Splay is enabled. Sleeping for $theSleepSeconds seconds."
sleep "$theSleepSeconds"s
<% else -%>
writeHostAndLogFile "Download and Install Splay is disabled."
<% end -%>

<% unless node['autopatch_ii']['updates_to_skip'].empty? %>
# Hold packages that we don't want to upgrade
/usr/bin/apt-mark hold <%= node['autopatch_ii']['updates_to_skip'].map { |skip| skip.to_s }.join(' ') -%> >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
<% end %>

writeHostAndLogFile "Checking for available updates."
/usr/bin/apt-get update >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1

writeHostAndLogFile "Beginning upgrade now!"
/usr/bin/apt-get upgrade -y >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
ExitCode=$?

writeHostAndLogFile "Finished upgrade with exit code $ExitCode"
writeHostAndLogFile "Running autoremove"
/usr/bin/apt-get autoremove -y >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1

# Unhold packages that we don't want to upgrade
<% unless node['autopatch_ii']['updates_to_skip'].empty? %>
/usr/bin/apt-mark unhold <%= node['autopatch_ii']['updates_to_skip'].map { |skip| skip.to_s }.join(' ') -%> >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
<% end %>

<% if node['autopatch_ii']['auto_reboot_enabled'] -%>
writeHostAndLogFile "Auto Reboot is enabled. Rebooting now!"
sendMailIfNecessary true false $ExitCode
/sbin/reboot
<% else -%>
writeHostAndLogFile "Auto Reboot is disabled. Manual reboot may be required."
sendMailIfNecessary true true $ExitCode
<% end -%>

exit 0
