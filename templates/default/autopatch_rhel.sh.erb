#!/bin/bash

# Fix ENV PATH for running as cron job
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

#
# Dynamically generated by Chef on <%= node['fqdn'] %>
# Local modifications will be overwritten by Chef.
#
# This is a modified version of https://github.com/bflad/chef-auto-patch/blob/master/templates/default/auto-patch.sh.erb
# This cookbook overrides the one in the autopatch_ii cookbook.

# Write a message to a log file and echo it to the console.
# Param 1: [string] The message to be logged.
function writeHostAndLogFile {
  echo $1
  echo "`date -Is` (<%= node['hostname'] %>): $1" >> <%= node['autopatch_ii']['working_dir'] %>/autopatch.log
}

# Send an email
#  Param 1: [string] The subject of the message to send
#  Param 2: [string] The plain-text body of the message to send
function sendEmail {
  to=<%= node['autopatch_ii']['email_to_addresses'].split(',').map {|x| x.gsub(/"/, "").strip}.join(',') %>
  from=<%= node['autopatch_ii']['email_from_address'] %>
  subject=$1
  body="$2"

  echo "$body" | mailx -s "$subject" -r "$from" -a "<%= node['autopatch_ii']['working_dir'] %>/autopatch.log" -S smtp="<%= node['autopatch_ii']['email_smtp_server'] %>" "$to"
}

# Based on configuration and the status of the process, conditionally sends an email
#  Param 1: [string] true or false, indicating whether yum upgrade was attempted
#  Param 2: [string] true or false, indicating whether manual reboot is required
#  Param 3: [integer], return code of previous process
function sendMailIfNecessary {
  updateAttempted=$1
  manualReboot=$2
  exitCode=$3
  mailNotificationMode=<%= node['autopatch_ii']['email_notification_mode'] %>
  subject="AutoPatch ran."
  body=""

  #check for non-zero exit code
  if [ $exitCode -gt 0 ]
  then
    someErrorOccurred=true
    subject="$subject Errors: Yes"
    body=$'AN ERROR OCCURRED. See full attached log for details.\n'
  else
    someErrorOccurred=false
    subject="$subject Errors: No"
    body=$'Update process was successful.\n'
  fi

  if [[ "$manualReboot" == "true" && "$updateAttempted" == "true" ]]
  then
    subject="$subject Reboot: Yes"
    body=$body$'Manual reboot may be required.\n'
  else
    subject="$subject Reboot: No"
    if [ "$updateAttempted" == "true" ]
    then
      body=$body$'Machine will automatically reboot.\n'
    else
      body=$body$'No new updates.\n'
    fi
  fi

  if [[ "$mailNotificationMode" == "Always" || ( "$mailNotificationMode" == "OnlyOnErrorOrManualReboot" && ( "$someErrorOccurred" == "true" || "$manualReboot" == "true" ) ) ]]
  then
    writeHostAndLogFile "Sending email notification"
    sendEmail "$subject" "$body"
  fi
}

# Real work starts here
<% if node['autopatch_ii']['download_install_splay_max_seconds'] > 0 -%>
theSleepSeconds=$[( ( $RANDOM % <%= node['autopatch_ii']['download_install_splay_max_seconds'] %> ) + 1 )]
writeHostAndLogFile "Download and Install Splay is enabled. Sleeping for $theSleepSeconds seconds."
sleep "$theSleepSeconds"s
<% else -%>
writeHostAndLogFile "Download and Install Splay is disabled."
<% end -%>

writeHostAndLogFile "Checking for available updates."
<% if node['autopatch_ii']['updates_to_skip'].length > 0 -%>
# There are updates configured to be skipped.  Skip them during the update check as well.
writeHostAndLogFile "Skipping packages: <%= node['autopatch_ii']['updates_to_skip'].join(',') %>"
<%# The following ruby code maps each 'skippable' element in the array to a string preceded by '-x '. -x is the skip option for yum. Then joins those together with spaces %>
updatesToSkipYumOptions="<%= node['autopatch_ii']['updates_to_skip'].map { |skipPkg| "-x #{skipPkg}" }.join(' ') %>"
<% else -%>
#No configured updates to skip.
updatesToSkipYumOptions=""
<% end -%>
/usr/bin/yum check-update $updatesToSkipYumOptions >><%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
checkUpdateExitCode=$?

if [ $checkUpdateExitCode -eq 100 ]
then
  writeHostAndLogFile "There is at least one update available. Commencing update process."
  writeHostAndLogFile "Beginning upgrade now!"

  <% if node['autopatch_ii']['updates_to_skip'].length > 0 -%>
  # There are updates configured to be skipped.
  writeHostAndLogFile "Skipping packages: <%= node['autopatch_ii']['updates_to_skip'].join(',') %>"
  <% else -%>
  #No configured updates to skip. updatesToSkipYumOptions should be empty
  <% end -%>

  <% if node['autopatch_ii']['update_command_options'].nil? || node['autopatch_ii']['update_command_options'].length == 0 -%>
  /usr/bin/yum -y upgrade $updatesToSkipYumOptions >> <%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
  <% else -%>
  /usr/bin/yum -y upgrade <%= node['autopatch_ii']['update_command_options'] %> $updatesToSkipYumOptions >> <%= node['autopatch_ii']['working_dir'] %>/autopatch.log 2>&1
  <% end -%>
  yumExitCode=$?
  writeHostAndLogFile "Finished yum upgrade with exit code $yumExitCode"

  <% if node['autopatch_ii']['auto_reboot_enabled'] -%>
  writeHostAndLogFile "Auto Reboot is enabled. Rebooting now!"
  sendMailIfNecessary true false $yumExitCode
  /usr/sbin/reboot
  <% else -%>
  writeHostAndLogFile "Auto Reboot is disabled. Manual reboot may be required."
  sendMailIfNecessary true true $yumExitCode
  <% end -%>

else
  writeHostAndLogFile "yum check-update returned with non-100 exit code '$checkUpdateExitCode'. Skipping update process."
  sendMailIfNecessary false false $checkUpdateExitCode
fi

exit 0
